{
  "id": "client-python",
  "title": "Python実装例",
  "description": "KAMUI CODE MCPサーバーをPythonから利用する実装例",
  "code": "# KAMUI CODE MCP Client - Python\nimport os\nimport asyncio\nfrom kamui_mcp import MCPClient\n\n# クライアントの初期化\nclient = MCPClient(\n    base_url=\"https://api.kamui-code.com\",\n    api_key=os.environ.get(\"KAMUI_API_KEY\")\n)\n\n# 画像生成の例\nasync def generate_image():\n    \"\"\"テキストから画像を生成する\"\"\"\n    try:\n        result = await client.creative.text2image(\n            prompt=\"サイバーパンク風の東京の街並み\",\n            model=\"sdxl-turbo\",\n            size=\"1024x1024\",\n            num_inference_steps=25\n        )\n        \n        print(f\"生成された画像URL: {result['image_url']}\")\n        return result\n    except Exception as e:\n        print(f\"画像生成エラー: {e}\")\n        \n# 画像編集の例\nasync def edit_image(image_path: str):\n    \"\"\"既存の画像を編集する\"\"\"\n    with open(image_path, \"rb\") as f:\n        image_data = f.read()\n        \n    result = await client.creative.image2image(\n        image=image_data,\n        prompt=\"アニメ風に変換\",\n        model=\"controlnet-anime\",\n        strength=0.8\n    )\n    \n    return result['edited_image_url']\n\n# 動画生成の例\nasync def generate_video():\n    \"\"\"プロンプトから動画を生成する\"\"\"\n    result = await client.creative.text2video(\n        prompt=\"宇宙船が惑星に着陸するシーン\",\n        model=\"gen-video-standard\",\n        duration=8,\n        resolution=\"720p\"\n    )\n    \n    # 生成状況をポーリング\n    while result['status'] == 'processing':\n        await asyncio.sleep(5)\n        result = await client.get_job_status(result['job_id'])\n        \n    return result['video_url']\n\n# 要件定義書生成の例\nasync def generate_requirements():\n    \"\"\"プロジェクトの要件定義書を生成する\"\"\"\n    result = await client.business.generate_requirements(\n        project_name=\"AI搭載チャットボット開発\",\n        objectives=[\n            \"24時間365日の顧客サポート\",\n            \"多言語対応（日英中）\",\n            \"FAQ自動応答\",\n            \"人間へのエスカレーション機能\"\n        ],\n        tech_stack={\n            \"backend\": \"Python/FastAPI\",\n            \"frontend\": \"Next.js\",\n            \"ai_model\": \"GPT-4\",\n            \"database\": \"PostgreSQL\"\n        },\n        budget=\"500万円\",\n        timeline=\"3ヶ月\"\n    )\n    \n    # 生成された要件定義書を保存\n    with open(\"requirements.md\", \"w\", encoding=\"utf-8\") as f:\n        f.write(result['document'])\n        \n    return result['document']\n\n# メイン実行\nif __name__ == \"__main__\":\n    # 非同期関数を実行\n    asyncio.run(generate_image())"
}
