{
  "id": "client-cursor",
  "title": "Cursor IDE実装例",
  "description": "Cursor IDEでKAMUI CODE MCPサーバーを利用する設定例",
  "code": "// Cursor IDE MCP設定\n// .cursorrules または プロジェクトの設定ファイル\n\n{\n  \"mcp_servers\": {\n    \"kamui_code\": {\n      \"endpoint\": \"https://api.kamui-code.com\",\n      \"auth\": {\n        \"type\": \"bearer\",\n        \"token\": \"${KAMUI_API_KEY}\"\n      },\n      \"capabilities\": [\n        \"image_generation\",\n        \"video_generation\",\n        \"code_generation\",\n        \"documentation\",\n        \"requirement_analysis\"\n      ]\n    }\n  },\n  \n  // Cursorのコマンドパレットから使用可能なコマンド\n  \"commands\": [\n    {\n      \"name\": \"KAMUI: Generate Image from Description\",\n      \"action\": \"kamui.generateImage\",\n      \"shortcut\": \"cmd+shift+i\"\n    },\n    {\n      \"name\": \"KAMUI: Convert Code to TypeScript\",\n      \"action\": \"kamui.convertToTypeScript\",\n      \"shortcut\": \"cmd+shift+t\"\n    },\n    {\n      \"name\": \"KAMUI: Generate Requirements Doc\",\n      \"action\": \"kamui.generateRequirements\",\n      \"shortcut\": \"cmd+shift+r\"\n    },\n    {\n      \"name\": \"KAMUI: Create Unit Tests\",\n      \"action\": \"kamui.generateTests\",\n      \"shortcut\": \"cmd+shift+u\"\n    }\n  ]\n}\n\n// Cursor内での使用例\n\n// 1. コメントから画像を生成\n// @kamui generate-image: サイバーパンク風のログイン画面のモックアップ\n\n// 2. 関数のドキュメント生成\n// @kamui document\nfunction calculateTotalPrice(items, taxRate, discount) {\n  const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  const taxAmount = subtotal * taxRate;\n  const discountAmount = subtotal * discount;\n  return subtotal + taxAmount - discountAmount;\n}\n\n// 3. コードの最適化\n// @kamui optimize performance\nconst processLargeDataset = (data) => {\n  // KAMUI CODEが最適化されたコードを提案\n  return data.map(item => {\n    // 処理内容\n  });\n};\n\n// 4. テストコードの自動生成\n// @kamui generate-tests\nclass UserService {\n  constructor(database) {\n    this.db = database;\n  }\n  \n  async createUser(userData) {\n    // KAMUI CODEがこのメソッドのテストを生成\n  }\n  \n  async getUserById(id) {\n    // KAMUI CODEがこのメソッドのテストを生成\n  }\n}\n\n// 5. 要件からコード生成\n// @kamui implement\n// 要件: ユーザー認証システム\n// - JWTトークンベース\n// - リフレッシュトークン対応\n// - ロールベースアクセス制御\n// - パスワードリセット機能\n\n// Cursor AIとの統合例\n// Cursor: 「このコンポーネントにダークモード対応を追加してください」\n// KAMUI CODE: スタイリングとテーマ切り替えロジックを自動生成...\n\n// プロジェクト全体の分析\n// @kamui analyze-project\n// - コードの複雑度分析\n// - 依存関係の可視化\n// - パフォーマンスボトルネックの検出\n// - セキュリティ脆弱性のスキャン"
}
