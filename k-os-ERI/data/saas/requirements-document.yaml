# 要件定義書
# KAMUI CODE プラットフォームの要件定義書

- id: requirements-document
  category: 2
  category_name: 要件定義・開発
  title: 要件定義書
  content: |
    KAMUI CODE プラットフォームの包括的な要件定義書です。システム要件、デザイン要件、技術仕様、開発計画を網羅しています。
  
  # メインビジュアル
  image: /images/kamui-gradient-soft-2.png
  
  # タブナビゲーション
  tabs:
    - id: overview
      label: 概要
      icon: 📋
      active: true
    - id: users
      label: ユーザー分析
      icon: 👥
    - id: requirements
      label: 要件定義
      icon: 📝
    - id: architecture
      label: アーキテクチャ
      icon: 🏗️
    - id: implementation
      label: 実装
      icon: 💻
    - id: operations
      label: 運用
      icon: ⚙️
  
  # 要件定義書ヘッダー
  header_info:
    version: "2.0"
    date: "2025年9月"
    status: "レビュー中"
  
  # 概要カード
  overview_cards:
    - title: プロジェクト概要
      icon: 📋
      content: |
        KAMUI CODEは、MCP（Model Context Protocol）に準拠した統合型AIプラットフォームです。
        クリエイティブ、開発、ビジネスの3領域を横断し、あらゆるデジタルコンテンツ制作を支援します。
    
    - title: 対象領域
      icon: 🎯
      content: |
        - **クリエイティブ**: 画像・動画・音楽生成
        - **開発**: コード生成・分析・デバッグ
        - **ビジネス**: 翻訳・要約・レポート作成
    
    - title: 主要機能
      icon: ⚡
      content: |
        - MCPプロトコル準拠の統合API
        - 30種類以上のAIモデル対応
        - リアルタイムプレビュー
        - 統合ダッシュボード

  
  
  # 機能要件テーブル
  functional_requirements:
    - id: FR-001
      name: テキスト→画像生成 (T2I)
      description: プロンプトから高品質な画像を生成（Flux, SDXL, Dalle-3対応）
      priority: 必須
    - id: FR-002
      name: 画像→画像変換 (I2I)
      description: 既存画像の編集・スタイル変換・高解像度化機能
      priority: 必須
    - id: FR-003
      name: テキスト→動画生成 (T2V)
      description: プロンプトから動画を生成（GenVideo, HaiperAI対応）
      priority: 必須
    - id: FR-004
      name: MCPサーバー統合
      description: クリエイティブ/開発/ビジネス領域の統合API管理
      priority: 必須
    - id: FR-005
      name: 要件定義書生成
      description: プロジェクト要件の自動生成・管理機能
      priority: 推奨
    - id: FR-006
      name: ストーリーボード作成
      description: ビジュアルストーリーテリング支援機能
      priority: 推奨
  
  # 非機能要件
  non_functional_requirements:
    - category: パフォーマンス
      requirements:
        - 画像生成は5秒以内
        - UI操作のレスポンスは100ms以内
        - 同時接続1000ユーザー対応
    - category: 可用性
      requirements:
        - 99.9%以上のアップタイム
        - 計画メンテナンス月1回以内
        - 障害復旧時間1時間以内
    - category: セキュリティ
      requirements:
        - HTTPS通信必須
        - Bearer Token認証
        - 定期的なセキュリティ監査
  
  # 技術スタック
  tech_stack:
    frontend:
      - name: React
        version: "18.x"
        purpose: UIフレームワーク
      - name: TypeScript
        version: "5.x"
        purpose: 型安全な開発
      - name: Tailwind CSS
        version: "3.x"
        purpose: スタイリング
    backend:
      - name: Node.js
        version: "20.x"
        purpose: サーバーランタイム
      - name: FastAPI
        version: "0.x"
        purpose: API開発
    ai_ml:
      - name: Stable Diffusion
        version: "XL"
        purpose: 画像生成
      - name: GPT-4
        version: "Latest"
        purpose: テキスト生成
  
  # セクション区切り
  sections:
    - type: overview
      title: 1. プロジェクト概要
      content: |
        KAMUI CODEは、Model Context Protocol (MCP) に準拠した統合型AIプラットフォームです。
        クリエイティブ、開発、ビジネスの3領域を横断し、あらゆるデジタルコンテンツ制作を支援します。
  
    - type: requirements
      title: 2. システム要件
      table:
        headers: ["要件ID", "カテゴリ", "説明", "優先度"]
        rows:
          - ["REQ-001", "機能要件", "MCPプロトコル準拠の通信", "必須"]
          - ["REQ-002", "非機能要件", "レスポンスタイム3秒以内", "必須"]
          - ["REQ-003", "セキュリティ", "Bearer Token認証", "必須"]
          - ["REQ-004", "可用性", "99.5%以上のアップタイム", "推奨"]
  
    - type: architecture
      title: 3. アーキテクチャ
      content: |
        システムアーキテクチャとエンドポイント設計の詳細は、以下のMermaid図を参照してください。
  
  # ユーザーペルソナキャンバス
  user_personas:
    - name: 開発者タロウ
      age: 28歳
      role: フロントエンドエンジニア
      icon: 👨‍💻
      goals:
        - 開発効率の向上
        - コード品質の改善
        - 最新技術の習得
      pain_points:
        - 繰り返し作業が多い
        - ドキュメント作成が面倒
        - レビュー待ち時間が長い
      needs:
        - AIによるコード補完
        - 自動テスト生成
        - ドキュメント自動化
    
    - name: デザイナー花子
      age: 32歳
      role: UIデザイナー
      icon: 👩‍🎨
      goals:
        - クリエイティブな表現
        - 制作時間の短縮
        - クライアント満足度向上
      pain_points:
        - アイデア出しに時間がかかる
        - 素材探しが大変
        - バリエーション作成が面倒
      needs:
        - AI画像生成
        - スタイル変換
        - 素材ライブラリ
    
    - name: PMサトシ
      age: 35歳
      role: プロジェクトマネージャー
      icon: 👨‍💼
      goals:
        - プロジェクト成功
        - チーム生産性向上
        - 納期厳守
      pain_points:
        - 要件定義が曖昧
        - 進捗管理が複雑
        - コミュニケーションコスト
      needs:
        - 要件定義書自動生成
        - プロジェクト分析
        - レポート作成支援
  
  # ユーザーの声（Testimonials）
  user_voices:
    - name: 佐藤 健
      role: プロダクトマネージャー
      company: SaaSスタートアップ
      rating: 5
      comment: |
        KAMUI CODE の統合APIと要件定義書テンプレートで、初期フェーズの立ち上げが圧倒的に早くなりました。チーム内の合意形成もスムーズです。
    - name: 山本 花
      role: フロントエンドエンジニア
      company: 受託開発
      rating: 4
      comment: |
        UIフローとデザイン仕様が明確にまとまっているので、実装の迷いが減りました。Mermaidやガントの埋め込みも便利です。
    - name: 李 俊
      role: 機械学習エンジニア
      company: 研究開発部門
      rating: 5
      comment: |
        画像・動画生成の要件と運用面の整理が一箇所で完結します。モデル比較やAPIエンドポイントの表も実務で役立っています。
  
  
  # カスタマージャーニーマップ（別セクション）
  journey_section:
    title: カスタマージャーニーマップ
    description: ユーザーがKAMUI CODEを利用する際の典型的なジャーニー
  
  customer_journey: |
    <div class="journey-map-container" style="background: #f8f9fa; padding: 20px; border-radius: 12px; margin: 20px 0;">
    <style>
        .journey-map {
          background: white;
          border-radius: 8px;
          padding: 15px;
          box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        .journey-phases {
          display: flex;
          margin-bottom: 15px;
          position: relative;
        }
        .phase {
          flex: 1;
          text-align: center;
          padding: 12px 30px 12px 20px;
          font-weight: bold;
          font-size: 14px;
          color: white;
          position: relative;
          margin-right: -20px;
          clip-path: polygon(0 0, calc(100% - 20px) 0, 100% 50%, calc(100% - 20px) 100%, 0 100%, 20px 50%);
        }
        .phase:first-child {
          padding-left: 30px;
          clip-path: polygon(0 0, calc(100% - 20px) 0, 100% 50%, calc(100% - 20px) 100%, 0 100%);
        }
        .phase:last-child {
          margin-right: 0;
          padding-right: 30px;
          clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%, 20px 50%);
        }
        .phase.awareness { background: #8B5CF6; }
        .phase.consideration { background: #3B82F6; }
        .phase.adoption { background: #10B981; }
        .journey-row {
        display: flex;
          align-items: stretch;
          margin-bottom: 10px;
        }
        .journey-label {
          width: 80px;
          padding: 10px 8px;
          font-weight: bold;
          font-size: 12px;
          background: #f1f3f5;
          border-radius: 6px 0 0 6px;
          display: flex;
          align-items: center;
          justify-content: center;
          text-align: center;
        }
        .journey-content {
          flex: 1;
          display: flex;
          gap: 5px;
          padding: 5px;
        }
        .journey-cell {
          flex: 1;
          background: white;
          border: 1px solid #e9ecef;
          border-radius: 6px;
          padding: 10px;
          text-align: center;
          position: relative;
          font-size: 11px;
        }
        .journey-cell.awareness { border-color: #DDD6FE; background: #FAF5FF; }
        .journey-cell.consideration { border-color: #DBEAFE; background: #F0F9FF; }
        .journey-cell.adoption { border-color: #D1FAE5; background: #F0FDF4; }
        
        /* ダークモード対応 */
        [data-theme="dark"] .journey-map-container {
          background: #1f2937;
          color: #e5e7eb;
        }
        [data-theme="dark"] .journey-map {
          background: #111827;
        }
        [data-theme="dark"] .journey-label {
          background: #1f2937;
          color: #d1d5db;
        }
        [data-theme="dark"] .journey-cell {
          background: #1f2937;
          border-color: #4b5563;
          color: #e5e7eb;
        }
        [data-theme="dark"] .canvas-container {
          background: #1f2937;
          color: #e5e7eb;
        }
        [data-theme="dark"] .canvas-container > div > div {
          background: #111827 !important;
          border-color: #4b5563 !important;
        }
        [data-theme="dark"] .canvas-container h3,
        [data-theme="dark"] .canvas-container h4 {
          color: #e5e7eb;
      }
    </style>
    
      <h3>ユーザージャーニーマップ</h3>
      <div class="journey-map">
        <!-- フェーズ -->
        <div class="journey-phases">
          <div class="phase awareness">認知・興味</div>
          <div class="phase consideration">検討・評価</div>
          <div class="phase adoption">導入・活用</div>
        </div>
        
        <!-- 行動 -->
        <div class="journey-row">
          <div class="journey-label">行動</div>
          <div class="journey-content">
            <div class="journey-cell awareness">
              <div style="font-size: 24px; margin-bottom: 5px;">🔍</div>
              <div>KAMUI CODEを発見</div>
            </div>
            <div class="journey-cell awareness">
              <div style="font-size: 24px; margin-bottom: 5px;">📖</div>
              <div>機能を確認</div>
            </div>
            <div class="journey-cell consideration">
              <div style="font-size: 24px; margin-bottom: 5px;">⚖️</div>
              <div>他ツールと比較</div>
            </div>
            <div class="journey-cell consideration">
              <div style="font-size: 24px; margin-bottom: 5px;">🧪</div>
              <div>無料試用</div>
            </div>
            <div class="journey-cell adoption">
              <div style="font-size: 24px; margin-bottom: 5px;">💳</div>
              <div>有料プラン購入</div>
            </div>
          </div>
        </div>
        
        <!-- タッチポイント -->
        <div class="journey-row">
          <div class="journey-label">タッチ<br>ポイント</div>
          <div class="journey-content">
            <div class="journey-cell awareness">検索・SNS</div>
            <div class="journey-cell awareness">公式サイト</div>
            <div class="journey-cell consideration">比較サイト</div>
            <div class="journey-cell consideration">管理画面</div>
            <div class="journey-cell adoption">決済画面</div>
          </div>
      </div>
      
        <!-- 思考 -->
        <div class="journey-row">
          <div class="journey-label">思考</div>
          <div class="journey-content">
            <div class="journey-cell awareness">統合型ツールを探している</div>
            <div class="journey-cell awareness">3領域対応が魅力的</div>
            <div class="journey-cell consideration">他社より機能が豊富</div>
            <div class="journey-cell consideration">使いやすそう</div>
            <div class="journey-cell adoption">業務効率が上がりそう</div>
          </div>
      </div>
      
        <!-- 感情 -->
        <div class="journey-row">
          <div class="journey-label">感情</div>
          <div class="journey-content">
            <div class="journey-cell awareness">😐 好奇心</div>
            <div class="journey-cell awareness">😊 期待感</div>
            <div class="journey-cell consideration">🤔 慎重</div>
            <div class="journey-cell consideration">😄 満足</div>
            <div class="journey-cell adoption">🎉 確信</div>
          </div>
      </div>
      </div>
    </div>
  
  # デザイン要件セクション
  design_specs:
    colors:
      - group: ダークテーマ
        swatches:
          - name: 背景
            color: "#1a1a1a"
            label: bg
          - name: テキスト
            color: "#ffffff"
            label: text
          - name: ボーダー
            color: "#2a2a2a"
            label: border
          - name: リンク
            color: "#4a9eff"
            label: link
      - group: ライトテーマ
        swatches:
          - name: 背景
            color: "#f7f7f8"
            label: bg
            light: true
          - name: テキスト
            color: "#1a1a1a"
            label: text
            light: true
          - name: ボーダー
            color: "#e4e4e7"
            label: border
            light: true
          - name: リンク
            color: "#2563eb"
            label: link
            light: true
    categories:
      - name: クリエイティブ
        class: creative
        gradient: "linear-gradient(135deg, #8B5CF6 0%, #EC4899 50%, #FB923C 100%)"
        description: 画像・動画・音楽生成
        colors:
          - "#8B5CF6"
          - "#EC4899"
          - "#FB923C"
      - name: 開発
        class: development
        gradient: "linear-gradient(135deg, #3B82F6 0%, #06B6D4 50%, #10B981 100%)"
        description: コード生成・分析・デバッグ
        colors:
          - "#3B82F6"
          - "#06B6D4"
          - "#10B981"
      - name: ビジネス
        class: business
        gradient: "linear-gradient(135deg, #10B981 0%, #14B8A6 50%, #06B6D4 100%)"
        description: 翻訳・要約・レポート
        colors:
          - "#10B981"
          - "#14B8A6"
          - "#06B6D4"
    typography:
      - label: メインタイトル
        sample: "KAMUI CODE ドキュメント"
        spec: "font-size: 1.6rem; font-weight: 700;"
      - label: セクションヘッダー
        sample: "1. 概要"
        spec: "font-size: 1.1rem; font-weight: 600;"
      - label: 本文
        sample: "KAMUI CODE は、MCP（Model Context Protocol）に準拠した複数のサーバー群を統合的に提供します。"
        spec: "font-size: 0.95rem; line-height: 1.7;"
      - label: コード
        sample: "const result = await api.generate({ prompt: 'hello' });"
        spec: "font-family: ui-monospace, monospace; font-size: 0.85rem;"
    layout:
      - サイドバー幅: 280px
      - メインコンテンツパディング: 24px
      - カード間隔: 18px
      - ボーダーラジウス: 8px～16px
    interaction:
      - ホバーエフェクト: 背景色変化、translateY(-2px)
      - トランジション: all 0.2s ease
      - スクロールビヘイビア: smooth
      - モーダル背景: rgba(0,0,0,0.6)
    responsive:
      - ブレークポイント: 768px
      - モバイルサイドバー: スライド式
      - グリッド調整: 3列 → 2列 → 1列
      - タッチ対応: タップ操作最適化
  
  # MCPプロトコル準拠の設定例
  code:
    language: json
    content: |
      {
        "mcpServers": {
          "kamui-creative": {
            "command": "npx",
            "args": ["@kamui/mcp-creative"],
            "env": {
              "API_KEY": "YOUR_CREATIVE_API_KEY"
            }
          },
          "kamui-dev": {
            "command": "npx",
            "args": ["@kamui/mcp-dev"],
            "env": {
              "API_KEY": "YOUR_DEV_API_KEY"
            }
          },
          "kamui-business": {
            "command": "npx",
            "args": ["@kamui/mcp-business"],
            "env": {
              "API_KEY": "YOUR_BUSINESS_API_KEY"
            }
          }
        }
      }
  
  # アーキテクチャ図
  mermaid: |
    graph TD
      A[KAMUI CODE Platform] --> B[Creative Category]
      A --> C[Development Category]
      A --> D[Business Category]
      
      B --> B1[Text→Image<br/>T2I]
      B --> B2[Image→Image<br/>I2I]
      B --> B3[Text→Video<br/>T2V]
      B --> B4[Video→Video<br/>V2V]
      
      C --> C1[Code Generation]
      C --> C2[Code Analysis]
      C --> C3[Debugging]
      C --> C4[Documentation]
      
      D --> D1[Translation]
      D --> D2[Summarization]
      D --> D3[Report Generation]
      D --> D4[Requirement Docs]
      
      style A fill:#8B5CF6,stroke:#fff,stroke-width:2px,color:#fff
      style B fill:#EC4899,stroke:#fff,stroke-width:2px,color:#fff
      style C fill:#3B82F6,stroke:#fff,stroke-width:2px,color:#fff
      style D fill:#10B981,stroke:#fff,stroke-width:2px,color:#fff
  
  # ガントチャート
  gantt: |
    gantt
      title KAMUI CODE 開発スケジュール
      dateFormat YYYY-MM-DD
      section フェーズ1
      要件定義 :done, req, 2025-01-01, 14d
      基本設計 :done, design, after req, 21d
      詳細設計 :active, detail, after design, 14d
      section フェーズ2
      MCPサーバー実装 :impl1, after detail, 30d
      フロントエンド実装 :impl2, after detail, 45d
      統合テスト :test, after impl1, 21d
      section フェーズ3
      性能調整 :perf, after test, 14d
      デプロイ準備 :deploy, after perf, 7d
      本番リリース :milestone, after deploy, 0d
  
  # 追加のMermaid図
  additional_mermaid:
    - type: system_architecture
      content: |
        graph TB
            subgraph "クライアント層"
                C1[MCPクライアント]
                C2[HTTPクライアント]
                C3[SDK/ライブラリ]
            end
            
            subgraph "ゲートウェイ層"
                GW["KAMUI CODE ゲートウェイ<br/>({BASE_URL})"]
            end
            
            subgraph "サービスルーター"
                RT["カテゴリ別ルーティング<br/>(t2i, i2i, t2v 等)"]
            end
            
            subgraph "プロバイダーサービス"
                direction TB
                P1[FAL.ai サービス]
                P2[Google サービス]
                P3[MiniMax サービス]
                P4[Runway サービス]
                P5[ByteDance サービス]
            end
            
            subgraph "モデルエンドポイント"
                M1[Imagen4 Ultra]
                M2[Flux モデル群]
                M3[Veo3]
                M4[Hailuo-02]
                M5[Dreamina v3.1]
            end
            
            C1 --> GW
            C2 --> GW
            C3 --> GW
            GW --> RT
            RT --> P1
            RT --> P2
            RT --> P3
            RT --> P4
            RT --> P5
            P1 --> M1
            P1 --> M2
            P2 --> M3
            P3 --> M4
            P5 --> M5
            
            style RT fill:#2d2d2d,stroke:#4a4a4a,stroke-width:1px
    - type: api_sequence
      content: |
        sequenceDiagram
            participant User as ユーザー
            participant Client as MCPクライアント
            participant Gateway as KAMUIゲートウェイ
            participant Provider as プロバイダーAPI
            participant Model as AIモデル
            
            User->>Client: 生成リクエスト
            Client->>Client: mcp/config.json読み込み
            Client->>Gateway: POST /t2i/fal/imagen4/ultra
            Note over Gateway: 認証 & ルーティング
            Gateway->>Provider: FAL APIへ転送
            Provider->>Model: Imagen4 Ultra実行
            Model-->>Provider: 生成画像
            Provider-->>Gateway: 結果返却
            Gateway-->>Client: URLレスポンス
            Client-->>User: 結果表示
    - type: deployment_flow
      content: |
        flowchart LR
            subgraph "開発"
                A[ローカル開発] --> B[Git コミット]
                B --> C[GitHub へプッシュ]
            end
            
            subgraph "CI/CD パイプライン"
                C --> D[GitHub Actions]
                D --> E{テスト成功?}
                E -->|はい| F[静的ファイルビルド]
                E -->|いいえ| G[問題修正]
                G --> B
            end
            
            subgraph "デプロイ"
                F --> H[GitHub Pages]
                F --> I[Cloudflare Pages]
                H --> J["docs.{BASE_URL}"]
                I --> K["{BASE_URL}"]
            end
            
            subgraph "CDN/配信"
                J --> L[グローバル CDN]
                K --> L
                L --> M[エンドユーザー]
            end
            
            style E fill:#f9f,stroke:#333,stroke-width:2px
    - type: operations_flow
      content: |
        flowchart LR
            subgraph "監視"
                M1[ヘルスチェック] --> M2{ステータスOK?}
                M2 -->|はい| M3[メトリクス記録]
                M2 -->|いいえ| M4[チームへ通知]
            end
            
            subgraph "インシデント対応"
                M4 --> I1[問題診断]
                I1 --> I2{緊急度?}
                I2 -->|高| I3[即座に修正]
                I2 -->|低| I4[修正予定]
                I3 --> I5[ホットフィックスデプロイ]
                I4 --> I6[定期メンテナンス]
            end
            
            subgraph "メンテナンス"
                I6 --> U1[サービス更新]
                U1 --> U2[変更テスト]
                U2 --> U3[ステージングデプロイ]
                U3 --> U4{テスト成功?}
                U4 -->|はい| U5[本番デプロイ]
                U4 -->|いいえ| U6[ロールバック]
                U6 --> U2
            end
            
            style I2 fill:#ff9,stroke:#333,stroke-width:2px
  
  # 参考デザイン画像
  images:
    - path: /images/kamui-gradient-soft-2.png
      name: KAMUI CODE メインビジュアル
    - path: /images/kamui-white-2-fullscreen-1.png
      name: フルスクリーンUI版1
    - path: /images/kamui-white-2-fullscreen-2.png
      name: フルスクリーンUI版2
    - path: /images/creative-tools-ui-1.png
      name: Creative Toolsクリック後UI版1
    - path: /images/creative-tools-ui-2.png
      name: Creative Toolsクリック後UI版2
    - path: /images/kamui-docs-ui-pattern1-dark.png
      name: ダークテーマパターン
    - path: /images/kamui-docs-ui-pattern2-gradient.png
      name: グラデーションパターン
    - path: /images/kamui-docs-ui-pattern5-japanese.png
      name: 日本語UIパターン
  
  additional_content: |
    ## 6. API仕様
    
    ### エンドポイント構造
    ```
    https://{BASE_URL}/{category}/{vendor}/{model}/{mode}
    ```
    
    ### カテゴリ別エンドポイント例
    - **画像生成**: `{BASE_URL}/t2i/fal/flux/ultra`
    - **動画生成**: `{BASE_URL}/t2v/fal/haiper/standard`
    - **コード生成**: `{BASE_URL}/code/github/copilot/completion`
    - **要件定義**: `{BASE_URL}/requirement/kamui/generator`
    
    ## 7. セキュリティ要件
    
    - **認証方式**: Bearer Token (JWT)
    - **通信暗号化**: TLS 1.3以上
    - **APIレート制限**: 100リクエスト/分 (ユーザー単位)
    - **データ保護**: 個人情報のハッシュ化、定期的な監査ログ
    
    ## 8. 受入基準
    
    - **基本エンドポイント**: 全カテゴリの基本エンドポイントが動作すること
    - **認証機能**: Bearer Tokenまたは同等の認証が有効であること
    - **ドキュメント**: 本HTMLがGitHub Pagesで正常表示されること
    - **レスポンスタイム**: 95%パーセンタイルが3秒以内
    - **エラーハンドリング**: 適切なエラーメッセージが返されること
    
    ## 9. 運用・保守
    
    - **監視**: エンドポイントのヘルスチェック、レスポンスタイム計測
    - **ログ管理**: APIリクエストログ、エラーログの集約・分析
    - **インシデント対応**: 障害時の通知フロー、復旧手順
    - **メンテナンスウィンドウ**: 定期的なサービス更新時間の設定
    
    ## 10. 付録
    
    ### Model Context Protocol (MCP) 仕様書
    
    KAMUI CODEが準拠している[Model Context Protocol (MCP) の公式仕様書](https://modelcontextprotocol.io/specification/2025-06-18)では、以下の内容が定義されています：
    
    - **基本プロトコル**: JSON-RPC 2.0メッセージフォーマット、ステートフルな接続、サーバー・クライアント間の機能ネゴシエーション
    - **サーバー機能**: 
      - Resources（コンテキストとデータ）
      - Prompts（テンプレート化されたメッセージとワークフロー）
      - Tools（AIモデルが実行する関数）
    - **クライアント機能**:
      - Sampling（サーバー主導のエージェント動作）
      - Roots（URI/ファイルシステム境界の問い合わせ）
      - Elicitation（ユーザーからの追加情報リクエスト）
    - **セキュリティ原則**: ユーザーの同意と制御、データプライバシー、ツールの安全性、LLMサンプリング制御
    
    詳細は[MCP公式仕様書](https://modelcontextprotocol.io/specification/2025-06-18)をご参照ください。
  
  # クライアント実装例
  client_samples:
    - id: client-javascript
      title: JavaScript/TypeScript実装例
    - id: client-python
      title: Python実装例
    - id: client-claude
      title: Claude Desktop実装例
    - id: client-cursor
      title: Cursor IDE実装例
  
  # 動的テーブル
  dynamic_table:
    id: apiEndpointsTable
    headers:
      - カテゴリ
      - エンドポイント
      - 説明
      - メソッド
      - 認証
    data_source: api-endpoints
  
  # UI遷移図
  flow_diagram:
    id: uiFlow
    type: interactive
    width: 1600
    height: 900
  
  # 料金プラン比較カード
  pricing_cards:
    - title: フリープラン
      pastel: true
      badges:
        - 無料
      list_class: checks
      list:
        - 画像生成: 月30回まで
        - 動画生成: 月10回まで
        - 基本モデルのみアクセス
        - 低優先度処理（待ち時間あり）
        - コミュニティサポート
    - title: 従量課金
      pastel: true
      badges:
        - 使った分だけ
      list_class: checks
      list:
        - 全て従量課金（原価+20%マージン）
        - 中優先度処理（標準的な待ち時間）
        - メールサポート（48時間以内）
        - 個人・小規模チーム利用向け
        - 使った分だけの公平な料金システム
    - title: エンタープライズ
      pastel: true
      badges:
        - お問い合わせ
      list_class: checks
      list:
        - 全モデル無制限利用
        - 最新モデル早期アクセス
        - 最優先処理（即時）
        - 専用Discordサポート
        - API使用量分析ダッシュボード
  
  # MCPカタログセクション
  mcp_section:
    enabled: true
    image: /images/kamui-white-2.png
